#!/bin/bash

set -e
set -o pipefail
generate() {
	schema="$1"
	shift
	toplevel_type="$1"
	shift
	namespace="$1"
	shift
	output_path="$1"

	if [[ ! -f "$schema" ]]; then
		echo "$schema not found" || exit 255
	fi

	npx quicktype "$schema" \
		--lang c++ \
		-s schema \
		-t "$toplevel_type" \
		--namespace "$namespace" \
		--code-format with-struct \
		--source-style multi-source \
		--include-location global-include \
		--type-style pascal-case-upper-acronyms \
		--member-style camel-case-upper-acronyms \
		--enumerator-style pascal-case-upper-acronyms \
		--no-boost \
		--hide-null-optional | {

		filename="/dev/null"

		while read -r line; do
			if [[ $line != //\ stdout && $line != //*.hpp ]]; then
				if [[ $line == \#include\ \"*\" ]]; then
					header=${line#\#include\ \"}
					header=${header%\"}
					printf "#include <%s/%s>\n" "$output_path" "$header" >>"$filename"
					continue
				fi

				echo "$line" >>"$filename"
				continue
			fi

			echo "// clang-format on" >>"$filename"

			filename="${repoRoot}/include/$output_path/${line#\/\/ }"
			if [[ $line == //\ stdout ]]; then
				filename="/dev/null"
			fi

			# echo "generating $filename"

			mkdir -p "$(dirname "$filename")"
			{
				echo "// Thish file is generated by /tools/codegen powered by quicktype."
				echo "// DO NOT EDIT IT."
				echo ""
				echo "// clang-format off"
			} >"$filename"
		done

		{
			echo ""
			echo "// clang-format on"
		} >>"$filename"
	}
}

GIT=${GIT:="git"}

repoRoot="$("$GIT" rev-parse --show-toplevel)"
cd "$repoRoot"/tools/codegen

npm install .

generate \
	"$repoRoot/runtime-spec/schema/config-schema.json" \
	Config \
	"ocppi::runtime::config" \
	"ocppi/runtime/config"

generate \
	"$repoRoot/runtime-spec/schema/state-schema.json" \
	State \
	"ocppi::runtime::state" \
	"ocppi/runtime/state"

generate \
	"$repoRoot/runtime-spec/schema/features-schema.json" \
	Features \
	"ocppi::runtime::features" \
	"ocppi/runtime/features"

PATCH_FILE=${PATCH_FILE:="$repoRoot"/tools/codegen/fix-unknow-types.patch}

if [[ ! -f "$PATCH_FILE" ]]; then
	exit
fi

cd "$repoRoot"
cp -r "$repoRoot/include" "$repoRoot/include.orig"
patch -s -p0 <"$PATCH_FILE"
rm -r "$repoRoot/include.orig"
